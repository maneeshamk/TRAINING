{
  "version": 3,
  "sources": ["src/app/service/dataservice.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient,HttpErrorResponse} from '@angular/common/http';\nimport { retry,catchError,Observable,throwError } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataserviceService {\nprivate apiUrl = 'https://jsonplaceholder.typicode.com/posts';\n  constructor(private http:HttpClient) { }\n\ngetPosts(): Observable<any> {\n    return this.http.get(this.apiUrl).pipe(\n      retry(3), // Retry up to 3 times if the request fails\n      // catchError((error) => {\n      //   console.error('Error after 3 retries:', error);\n      //   throw error;\n      // })\n      catchError(this.handleError)\n    );\n  }\n\n private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side or network error\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Backend error\n      errorMessage = `Backend error: ${error.status} - ${error.message}`;\n    }\n\n    // Log the error (for example purposes, could be sent to an external service)\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));  // Throw the error to the component\n  }\n  getUser(id: number) {\n    return this.http.get('http://localhost:3000/users/'+id);\n  }\n  getUsers() {\n    return this.http.get('http://localhost:3000/users');\n  }\n  addUser(user: any) {\n    return this.http.post('http://localhost:3000/users', user);\n  }\n  updateUser( user: any) {\n    console.log('Updating user api:', user);\n    return this.http.put('http://localhost:3000/users/'+user.id, user);\n  }\n  deleteUser(id: number) {\n    return this.http.delete('http://localhost:3000/users/'+id);\n  }\n  patchUser(id: number, user: any) {\n    return this.http.patch('http://localhost:3000/users/'+id, user);\n}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;IAMa;;;;;AANb;AACA;AACA;AAIO,IAAM,qBAAN,MAAMA,oBAAkB;MAET;MADd,SAAS;MACf,YAAoB,MAAe;AAAf,aAAA,OAAA;MAAmB;MAEzC,WAAQ;AACJ,eAAO,KAAK,KAAK,IAAI,KAAK,MAAM,EAAE;UAChC,MAAM,CAAC;;;;;;UAKP,WAAW,KAAK,WAAW;QAAC;MAEhC;MAEO,YAAY,OAAwB;AACzC,YAAI,eAAe;AACnB,YAAI,MAAM,iBAAiB,YAAY;AAErC,yBAAe,sBAAsB,MAAM,MAAM,OAAO;QAC1D,OAAO;AAEL,yBAAe,kBAAkB,MAAM,MAAM,MAAM,MAAM,OAAO;QAClE;AAGA,gBAAQ,MAAM,YAAY;AAC1B,eAAO,WAAW,MAAM,IAAI,MAAM,YAAY,CAAC;MACjD;MACA,QAAQ,IAAU;AAChB,eAAO,KAAK,KAAK,IAAI,iCAA+B,EAAE;MACxD;MACA,WAAQ;AACN,eAAO,KAAK,KAAK,IAAI,6BAA6B;MACpD;MACA,QAAQ,MAAS;AACf,eAAO,KAAK,KAAK,KAAK,+BAA+B,IAAI;MAC3D;MACA,WAAY,MAAS;AACnB,gBAAQ,IAAI,sBAAsB,IAAI;AACtC,eAAO,KAAK,KAAK,IAAI,iCAA+B,KAAK,IAAI,IAAI;MACnE;MACA,WAAW,IAAU;AACnB,eAAO,KAAK,KAAK,OAAO,iCAA+B,EAAE;MAC3D;MACA,UAAU,IAAY,MAAS;AAC7B,eAAO,KAAK,KAAK,MAAM,iCAA+B,IAAI,IAAI;MAClE;;;;;AA/Ca,yBAAkB,WAAA;MAH9B,WAAW;QACV,YAAY;OACb;OACY,kBAAkB;;;",
  "names": ["DataserviceService"]
}
